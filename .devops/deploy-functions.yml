# Azure DevOps pipeline to release a new version and deploy to production.

variables:
  HEALTHCHECK_PATH: "api/info"

parameters:
  - name: "RELEASE_SEMVER"
    displayName: "When packing a release, define the version bump to apply"
    type: string
    values:
      - major
      - minor
      - patch
    default: minor
  # Map of production apps to deploy to, in the form
  #   {logicName}:
  #     appname: {name of the resource}
  #     rg: {name of the resource group}
  # Although it's a parameter, it's not intended to be edited at runtime.
  # It's here because variables only handle scalar values
  - name: "PRODUCTION_APPS"
    displayName: ""
    type: object
    default:
      sign:
        appname: io-p-sign-func
        rg: io-p-sign-backend-rg

# Only manual activations are intended
trigger: none
pr: none

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
# the build and deploy.
pool:
  vmImage: "ubuntu-latest"

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v19
      endpoint: "io-azure-devops-github-ro"

stages:
  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch main
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    condition: and(
      succeeded(),
      or(
      eq(variables['Build.SourceBranch'], 'refs/heads/main'),
      and(
      startsWith(variables['Build.SourceBranch'], 'refs/tags'),
      endsWith(variables['Build.SourceBranch'], '-RELEASE')
      )
      )
      )
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: make_release
        steps:
          - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
              - template: project-setup.yml
                parameters:
                  persistCredentials: true
              - template: templates/node-github-release/template.yaml@pagopaCommons
                parameters:
                  semver: "${{ parameters.RELEASE_SEMVER }}"
                  gitEmail: $(GIT_EMAIL)
                  gitUsername: $(GIT_USERNAME)
                  gitHubConnection: $(GITHUB_CONNECTION)
                  release_branch: main

          - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/main') }}:
              - script: |
                  echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
                displayName: "Skip release bundle"

  # Prepare Artifact
  - stage: Prepare_artifact
    dependsOn:
      - Release
    jobs:
      - job: "prepare_artifact"
        steps:
          # Build application
          - template: project-setup.yml
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/main --> main
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}
          - script: |
              yarn build
            displayName: "Build"

          # Install functions extensions
          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              arguments: "-o bin"

          # Copy application to
          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(System.DefaultWorkingDirectory)"
              TargetFolder: "$(System.DefaultWorkingDirectory)/bundle"
              Contents: |
                **/*
                !.git/**/*
                !**/*.js.map
                !**/*.ts
                !.vscode/**/*
                !.devops/**/*
                !.husky/**/*
                !docs/**/*
                !src/**/*
                !.prettierrc
                !.prettierignore
                !.eslintrc.json
                !.gitignore
                !.adr-dir
                !.node-version
                !.nvmrc
                !docker-compose.yml
                !jest.config.js
                !local.settings.json
                !tsconfig.json
                !yarn.lock
                !openapi-issuer.yaml
                !README.md
                !CODEOWNERS
                !__*/**/*
            displayName: "Copy deploy files"

          - publish: $(System.DefaultWorkingDirectory)/bundle
            artifact: Bundle

  - ${{ each app in parameters.PRODUCTION_APPS }}:
      - stage: Deploy_${{ app.Key }}
        dependsOn:
          - Prepare_artifact
        jobs:
          - job: "do_deploy_${{ app.Key }}"
            steps:
              - checkout: none
              - download: current
                artifact: Bundle
              - task: AzureFunctionApp@1
                inputs:
                  azureSubscription: "$(PRODUCTION_AZURE_SUBSCRIPTION)"
                  resourceGroupName: "${{ app.Value.rg }}"
                  appType: "functionApp"
                  appName: "${{ app.Value.appname }}"
                  package: "$(Pipeline.Workspace)/Bundle"
                  deploymentMethod: "auto"
                displayName: Deploy to staging slot
